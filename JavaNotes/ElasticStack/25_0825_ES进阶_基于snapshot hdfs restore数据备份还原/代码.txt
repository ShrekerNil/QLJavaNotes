snapshot  hdfs 数据迁移

curl -H "Content-Type: application/json" -XGET 'http://172.16.10.182:9200/_count?pretty' -d '
{
    "query": {
        "match_all": {}
    }
}'

#创建仓库
curl -H "Content-Type: application/json" -XPUT 'http://172.16.10.182:9200/_snapshot/hdfs_repository' -d '
{
  "type": "hdfs",
  "settings": {
    "uri": "hdfs://172.16.10.182:9000/",
    "path": "elasticsearch/respositories/hdfs_repository",
    "conf.dfs.client.read.shortcircuit": "true",
    "max_snapshot_bytes_per_sec" : "20mb", 
    "max_restore_bytes_per_sec" : "20mb"
  }
}'
仓库类型：
 	fs: 共享文件系统，将快照文件存放于文件系统中
	url: 指定文件系统的URL路径，支持协议：http,https,ftp,file,jar
 	s3: AWS S3对象存储,快照存放于S3中，以插件形式支持
 	hdfs: 快照存放于hdfs中，以插件形式支持
 	cos: 快照存放于腾讯云COS对象存储中，以插件形式支持

***********************************对所有open的索引进行snapshotting备份
检查仓库：curl -XPOST 'http://172.16.10.182:9200/_snapshot/hdfs_repository/_verify'
备份索引：curl -XPUT 'http://172.16.10.182:9200/_snapshot/hdfs_repository/bak_20200825_01'
	curl -XPUT 'http://172.16.10.182:9200/_snapshot/hdfs_repository/bak_20200825_01?wait_for_completion=true'
	curl -XDELETE 'http://172.16.10.182:9200/_snapshot/hdfs_repository/bak_20200825_1?pretty'
wait_for_completion=true  前端等待他执行完毕  很有必要 只有执行完了 才能执行下一行代码
*********************备份指定索引
curl -H "Content-Type: application/json" -XPUT ‘http://172.16.10.182:9200/_snapshot/hdfs_repository/bak_20200825_02?pretty
{
    "indices": "sys-tcp-2020.07.18",
	"ignore_unavailable": true,
	"include_global_state": false,
	"partial": true
}
ignore_unavailable:true	忽略不存在的索引
include_global_state:false	忽略cluster的全局state
partial:true		允许部分备份，避免备份失败。比如主分片不可用，若未设置此项，则会导致备份失败



**********************
查看（监控）备份：	curl -XGET 'http://172.16.10.182:9200/_snapshot/hdfs_repository/bak_20200825_01?pretty'
删除（取消）备份：	curl -XDELETE 'http://172.16.10.182:9200/_snapshot/hdfs_repository/bak_20200825_01?pretty'

恢复备份数据：restore
restore只能针对已经close掉的index来执行，而且这个index的shard还必须跟snapshot中的index的shard数量是一致的。restore操作会自动在恢复好一个index之后open这个index，或者如果这些index不存在，那么就会自动创建这些index。如果通过include_global_state存储了集群的state，还会同时恢复一些template。
curl -H "Content-Type: application/json" -XPOST 'http://172.16.10.182:9200/_snapshot/hdfs_repository/bak_20200825_01/_restore?pretty' -d '
{
    "indices": "sys-tcp-2020.07.18", 
    "ignore_unavailable": true,
    "include_global_state": true,
    "rename_pattern": "sys-tcp-(.+)", 
    "rename_replacement": "sys-tcp-new_$1" 
}'

恢复进度：curl -XGET 'http://172.16.10.182:9200/sys-tcp-2020.07.18/_recovery?pretty'




ES 6.7 +   CCR - Cross Cluster Replication		面试题：你了解ES的CCR么
概念：跨集群复制 (CCR) 功能支持将特定索引从一个 ElasticSearch 集群复制到一个或多个 ElasticSearch 集群。除了跨数据中心复制之外，CCR 还有许多其他用例，包括数据本地化（将数据复制到距离用户/应用程序服务器更近的位置，例如，将产品目录复制到全球 20 个不同的数据中心），或者将数据从 Elasticsearch 集群复制到中央报告集群（例如，全球 1000 家银行分行都向其本地 Elasticsearch 集群写入数据，并复制回总部的集群用于报告）。


跨集群复制 好处	 收费的：https://www.elastic.co/cn/subscriptions
	如果主群集发生故障，则进行灾难恢复。辅助群集可以用作热备份		不可抗力，比如火山、地震、台风等，机房直接GG
	实现就近访问，因此可以在本地提供订阅服务			总公司-分公司。
	多集群集中治理。						一个部门维护多个集群，多个集群订阅到本地，可视化分析报告。比如多个分公司都有自己的数据，如华为-荣耀，要集中起来做数据报表。

前提：
	1：需要远程集群
	2：新集群版本必须高于旧集群，并且需要满足兼容性条件（附件）

特点：
	1：复制是基于索引的
	2：复制的索引是只读的（flower），没有选举leader一说。


操作
	1：图形界面
	2：代码




****************************************************************************************
Reindex 重建索引 
为什么要重建索引？
	1：mapping需要修改的时候
	2：某些对数据实时性要求不高场景，可以定时更新，这要可以提高检索性能
	3：数据迁移

GET /product/_search?scroll=1m
{
    "query": {
        "match_all": {}
    },
    "sort": ["_doc"],
    "size":  1
}


POST /_bulk
{ "index":  { "_index": "product_new", "_id": "1" }}
{ "name":    "小米手机" ,"desc" : "手机中的战斗机"}


#切换索引
POST /_aliases
{
    "actions": [
        { "remove": { "index": "product", "alias": "product_temple" }},
        { "add":    { "index": "product_new", "alias": "product_temple" }}
    ]
}

重命名别名
POST /_aliases
{
  "actions" : [
    { "remove" : { "index" : "test1", "alias" : "alias1" } },
    { "add" : { "index" : "test1", "alias" : "alias2" } }
  ]
}

绑定多个索引
POST /_aliases
{
  "actions" : [
    { "add" : { "index" : "test1", "alias" : "alias1" } },
    { "add" : { "index" : "test2", "alias" : "alias1" } }
  ]
}

GET product/_search
GET product_temple/_search
GET product_new/_search



PUT /my_index_v1/_alias/my_index