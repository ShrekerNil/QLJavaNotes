#POST product2/_doc/4/_update
#ctx._source.<field-name>
POST product2/_update/4
{
  "script": {
    "source": "ctx._source.price-=1"
  }
}
#可以简写
POST product2/_update/4
{
  "script": "ctx._source.price-=1"
}

GET /product2/_doc/4	
#在举个例子  比如小米10出新款了 新增一个tag叫 无线充电
GET /product2/_search
DELETE product2
POST product2/_update/3
{
  "script": {
    "lang": "painless",
    "source": "ctx._source.tags.add('无线充电')"
  }
}
#传参
POST product2/_update/3
{
  "script": {
    "lang": "painless",
    "source": "ctx._source.tags.add(params.tag_name)",
    "params": {
      "tag_name": "无线充电"
    }
  }
}

#操作不止能改数据 
#delete
POST product2/_update/15
{
  "script": {
    "lang": "painless",
    "source": "ctx.op='delete'"
  }
}
#upsert   smartison  update insert
#如果数据存在,执行partial update操作,如果数据不存在,那么执行create操作
GET /product2/_doc/15
POST product2/_update/15
{
  "script": {
    "source": "ctx._source.price += params.param1",
    "lang": "painless",
    "params": {
      "param1": 100
    }
  },
  "upsert": {
    "name": "小米10",
    "price": 1999
  }
}

#改成_bulk批量操作呢
POST _bulk
{
  "update":{
    "_index":"product2",
    "_id":"15",
    "retry_on_conflict":3
  }
}
{
  "script": {
    "source": "ctx._source.price += params.param1",
    "lang": "painless",
    "params": {
      "param1": 100
    }
  },
  "upsert": {
    "name": "小米10",
    "price": 1999
  }
}

POST _bulk
{ "update" : { "_id" : "0", "_index" : "product2", "retry_on_conflict" : 3} }
{ "script" : { "source": "ctx._source.price += params.param1", "lang" : "painless", "params" : {"param1" : 100}}, "upsert" : {"price" : 1999}}

#GET查询 除了painless(默认) ES还支持 (了解)
#expression(快速的自定义排名和排序) 
#mustache(范本) 
#java(专家API)
#这些语言应用场景更窄,但是可能性能更好
GET product2/_search
{
  "script_fields": {
    "test_field": {
      "script": {
        "lang":   "expression",
        "source": "doc['price']"
      }
    }
  }
}

#Elasticsearch首次执行脚本时，将对其进行编译并将编译后的版本存储在缓存中。编译过程比较消耗性能。
#如果需要将变量传递到脚本中，则应以命名形式传递变量，params而不是将值硬编码到脚本本身中。例如，如果您希望能够将字段值乘以不同的乘数，请不要将乘数硬编码到脚本中

#看took消耗
GET product2/_search
{
  "script_fields": {
    "test_field": {
      "script": {
        "lang":   "expression",
        "source": "doc['price'] * 9"
      }
    }
  }
}
GET product2/_search
{
  "script_fields": {
    "test_field": {
      "script": {
        "lang":   "painless",
        "source": "doc['price'].value * 9"
      }
    }
  }
}
#更换num的值 对比took消耗   
GET product2/_search
{
  "script_fields": {
    "test_field": {
      "script": {
        "lang":   "expression",
        "source": "doc['price'] * num",
        "params": {
          "num": 6
        }
      }
    }
  }
}
#doc['price'] * num只编译一次而doc['price'] * 9 会随着数字改变而一直编译,ES默认每分钟支持15次编译



#例如 打8折价格
GET product2/_search
{
  "script_fields": {
    "discount_price": {
      "script": {
        "lang": "painless",
        "source": "doc['price'].value * params.discount",
        "params": {
          "discount": 0.8
        }
      }
    }
  }
}
# 原始价格 和 多个打折价格
GET product2/_search
{
  "script_fields": {
    "price": {
      "script": {
        "lang": "painless",
        "source": "doc['price'].value"
      }
    },
    "discount_price": {
      "script": {
        "lang": "painless",
        "source": "[doc['price'].value * params.discount_8,doc['price'].value * params.discount_7,doc['price'].value * params.discount_6,doc['price'].value * params.discount_5]",
        "params": {
          "discount_8": 0.8,
          "discount_7": 0.7,
          "discount_6": 0.6,
          "discount_5": 0.5
        }
      }
    }
  }
}

GET product2/_search
{
  "script_fields": {
    "discount_price": {
      "script": {
        "lang": "painless",
        "source": "doc.price.value * params.discount",
        "params": {
          "discount": 0.8
        }
      }
    }
  }
}

POST /product/_refresh
# Stored scripts :可以理解为script模板  缓存在集群的cache中
# /_scripts/{id}  类似存储过程  计算折扣 作用域为整个集群
# 默认缓存大小是100MB  没有过期时间 可以手工设置过期时间script.cache.expire 通过script.cache.max_size设置缓存大小 脚本最大64MB 通过script.max_size_in_bytes配置 只有发生变更时重新编译
POST _scripts/calculate-discount
{
  "script": {
    "lang": "painless",
    "source": "doc['price'].value * params.discount"
  }
}
#查看
GET _scripts/calculate-discount
DELETE _scripts/calculate-discount

GET product2/_search
{
  "script_fields": {
    "discount_price": {
      "script": {
        "id":"calculate-discount",
        "params": {
          "discount": 0.8
        }
      }
    }
  }
}

# Dates
#官网Bug: 日期字段公开为 ZonedDateTime，因此它们支持诸如之类的方法getYear，getDayOfWeek 或例如从历元开始到毫秒getMillis。要在脚本中使用它们，请省略get前缀并继续使用小写的方法名其余部分。例如，以下代码返回每个冰球运动员的出生年份getYear()
#getMonth()
#getDayOfMonth()
#getDayOfWeek()
#getDayOfYear()
#getHour()
#getMinute()
#getSecond()
#getNano()
GET product2/_search
{
  "script_fields": {
    "test_year": {
      "script": {
        "source": "doc.createtime.value.year"
      }
    }
  }
}

#那么遇到复杂脚本,写很多行怎么办呢
POST product2/_update/1
{
  "script": {
    "lang": "painless",
    "source": """
      ctx._source.name += params.name;
      ctx._source.price -= 1
    """,
    "params": {
      "name": "无线充电",
      "price": "1"
    }
  }
}
#查看
GET product2/_doc/1
#如果未启用 会报错 所以你们看到的不是这样的 script.painless.regex.enabled: true
POST product2/_update/1
{
  "script": {
    "lang": "painless",
    "source": """
      if (ctx._source.name =~ /[\s\S]*phone[\s\S]*/) {
        ctx._source.name += "***|";
      } else {
        ctx.op = "noop";
      }
    """
  }
}


#[0-9]{4}-[0-9]{2}-[0-9]{2}匹配出来的不一定是日期 比如  9999-99-99  但是日期一定能匹配上
POST product2/_update/1
{
  "script": {
    "lang": "painless",
    "source": """
      if (ctx._source.createtime ==~ /[0-9]{4}-[0-9]{2}-[0-9]{2}/) {
        ctx._source.name += "|***";
      } else {
        ctx.op = "noop";
      }
    """
  }
}

#最后一个例子  聚合查询使用  
#统计所有小于1000商品tag的 数量 不考虑去重
GET /product/_search
GET /product/_search
{
  "query": {
    "bool": {
      "filter": [
        {
          "range": {
            "price": {
              "lt": 1000
            }
          }
        }
      ]
    }
  },
  "aggs": {
    "tag_agg_group": {
      "sum": {
        "script": {
          "lang": "painless",
          "source": """
            int total = 0;
            for (int i = 0; i < doc['tags'].length; i++)
            {
               total++
            }
            return total;
          """
        }
      }
    }
  },
  "size": 0
}

#随堂测验
#  doc['field'].value => params['_source']['field']

GET /test_index/_search
{
  "aggs": {
    "sum_person": {
      "sum": {
        "script": {
          "lang": "painless",
          "source": """
            int total = 0;
            for (int i = 0; i < params['_source']['jsbax_sjjh2_xz_ryjbxx_cleaning'].length; i++)
            {
              if (params['_source']['jsbax_sjjh2_xz_ryjbxx_cleaning'][i]['SF'] == '男') {
                total += 1;
              }
            }
            return total;
          """
        }
      }
    }
  },
  "size": 0
}











